(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{79:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return d}));var n=r(3),a=r(7),o=(r(0),r(99)),i={id:"pitfalls",title:"Pitfalls"},s={unversionedId:"pitfalls",id:"pitfalls",isDocsHomePage:!1,title:"Pitfalls",description:"Performance tips",source:"@site/docs/pitfalls.md",slug:"/pitfalls",permalink:"/immer/pitfalls",editUrl:"https://github.com/immerjs/immer/edit/master/website/docs/pitfalls.md",version:"current",sidebar:"Immer",previous:{title:"Frequently Asked Questions",permalink:"/immer/faq"},next:{title:"Built with Immer",permalink:"/immer/built-with"}},l=[{value:"Performance tips",id:"performance-tips",children:[]},{value:"Don&#39;t reassign the recipe argument",id:"dont-reassign-the-recipe-argument",children:[]},{value:"Immer only supports unidirectional trees",id:"immer-only-supports-unidirectional-trees",children:[]},{value:"Never explicitly return <code>undefined</code> from a producer",id:"never-explicitly-return-undefined-from-a-producer",children:[]},{value:"Don&#39;t mutate exotic objects",id:"dont-mutate-exotic-objects",children:[]},{value:"Classes should be made draftable or not mutated",id:"classes-should-be-made-draftable-or-not-mutated",children:[]},{value:"Only valid indices and length can be mutated on Arrays",id:"only-valid-indices-and-length-can-be-mutated-on-arrays",children:[]},{value:"Data not originating from the state will never be drafted",id:"data-not-originating-from-the-state-will-never-be-drafted",children:[]},{value:"Immer patches are not necessarily optimal",id:"immer-patches-are-not-necessarily-optimal",children:[]},{value:"Always use the result of nested producers",id:"always-use-the-result-of-nested-producers",children:[]},{value:"Drafts aren&#39;t referentially equal",id:"drafts-arent-referentially-equal",children:[]}],c={toc:l};function d(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("center",null,Object(o.b)("div",{"data-ea-publisher":"immerjs","data-ea-type":"image",class:"horizontal bordered"})),Object(o.b)("h3",{id:"performance-tips"},"Performance tips"),Object(o.b)("p",null,"For performance tips, see ",Object(o.b)("a",{parentName:"p",href:"/immer/performance#performance-tips"},"Performance Tips"),"."),Object(o.b)("h3",{id:"dont-reassign-the-recipe-argument"},"Don't reassign the recipe argument"),Object(o.b)("p",null,"Never reassign the ",Object(o.b)("inlineCode",{parentName:"p"},"draft")," argument (example: ",Object(o.b)("inlineCode",{parentName:"p"},"draft = myCoolNewState"),"). Instead, either modify the ",Object(o.b)("inlineCode",{parentName:"p"},"draft")," or return a new state. See ",Object(o.b)("a",{parentName:"p",href:"/immer/return"},"Returning data from producers"),"."),Object(o.b)("h3",{id:"immer-only-supports-unidirectional-trees"},"Immer only supports unidirectional trees"),Object(o.b)("p",null,"Immer assumes your state to be a unidirectional tree. That is, no object should appear twice in the tree, there should be no circular references. There should be exactly one path from the root to any node of the tree."),Object(o.b)("h3",{id:"never-explicitly-return-undefined-from-a-producer"},"Never explicitly return ",Object(o.b)("inlineCode",{parentName:"h3"},"undefined")," from a producer"),Object(o.b)("p",null,"It is possible to return values from producers, except, it is not possible to return ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," that way, as it is indistinguishable from not updating the draft at all! If you want to replace the draft with ",Object(o.b)("inlineCode",{parentName:"p"},"undefined"),", just return ",Object(o.b)("inlineCode",{parentName:"p"},"nothing")," from the producer."),Object(o.b)("h3",{id:"dont-mutate-exotic-objects"},"Don't mutate exotic objects"),Object(o.b)("p",null,"Immer ",Object(o.b)("a",{parentName:"p",href:"https://github.com/immerjs/immer/issues/504"},"does not support exotic objects")," such as window.location."),Object(o.b)("h3",{id:"classes-should-be-made-draftable-or-not-mutated"},"Classes should be made draftable or not mutated"),Object(o.b)("p",null,"You will need to enable your own classes to work properly with Immer. For docs on the topic, check out the section on ",Object(o.b)("a",{parentName:"p",href:"/immer/complex-objects"},"working with complex objects"),"."),Object(o.b)("h3",{id:"only-valid-indices-and-length-can-be-mutated-on-arrays"},"Only valid indices and length can be mutated on Arrays"),Object(o.b)("p",null,"For arrays, only numeric properties and the ",Object(o.b)("inlineCode",{parentName:"p"},"length")," property can be mutated. Custom properties are not preserved on arrays."),Object(o.b)("h3",{id:"data-not-originating-from-the-state-will-never-be-drafted"},"Data not originating from the state will never be drafted"),Object(o.b)("p",null,"Note that data that comes from the closure, and not from the base state, will never be drafted, even when the data has become part of the new draft."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"function onReceiveTodo(todo) {\n    const nextTodos = produce(todos, draft => {\n        draft.todos[todo.id] = todo\n        // Note, because 'todo' is coming from external, and not from the 'draft',\n        // it isn't draft so the following modification affects the original todo!\n        draft.todos[todo.id].done = true\n\n        // The reason for this, is that it means that the behavior of the 2 lines above\n        // is equivalent to code, making this whole process more consistent\n        todo.done = true\n        draft.todos[todo.id] = todo\n    })\n}\n")),Object(o.b)("h3",{id:"immer-patches-are-not-necessarily-optimal"},"Immer patches are not necessarily optimal"),Object(o.b)("p",null,"The set of patches generated by Immer should be correct, that is, applying them to an equal base object should result in the same end state. However Immer does not guarantee the generated set of patches will be optimal, that is, the minimum set of patches possible."),Object(o.b)("h3",{id:"always-use-the-result-of-nested-producers"},"Always use the result of nested producers"),Object(o.b)("p",null,"Nested ",Object(o.b)("inlineCode",{parentName:"p"},"produce")," calls are supported, but note that ",Object(o.b)("inlineCode",{parentName:"p"},"produce")," will ",Object(o.b)("em",{parentName:"p"},"always")," produce a new state, so even when passing a draft to a nested produce, the changes made by the inner produce won't be visible in the draft that was passed it, but only in the output that is produced. In other words, when using nested produce, you get a draft of a draft and the result of the inner produce should be merged back into the original draft (or returned). For example ",Object(o.b)("inlineCode",{parentName:"p"},'produce(state, draft => { produce(draft.user, userDraft => { userDraft.name += "!" })})')," won't work as the output if the inner produce isn't used. The correct way to use nested producers is:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},'produce(state, draft => {\n    draft.user = produce(draft.user, userDraft => {\n        userDraft.name += "!"\n    })\n})\n')),Object(o.b)("h3",{id:"drafts-arent-referentially-equal"},"Drafts aren't referentially equal"),Object(o.b)("p",null,"Draft objects in Immer are wrapped in ",Object(o.b)("inlineCode",{parentName:"p"},"Proxy"),", so you cannot use ",Object(o.b)("inlineCode",{parentName:"p"},"==")," or ",Object(o.b)("inlineCode",{parentName:"p"},"===")," to test equality between an original object and its equivalent draft (eg. when matching a specific element in an array). Instead, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"original")," helper:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-javascript"},"const remove = produce((list, element) => {\n    const index = list.indexOf(element) // this won't work!\n    const index = original(list).indexOf(element) // do this instead\n    if (index > -1) list.splice(index, 1)\n})\n\nconst values = [a, b, c]\nremove(values, a)\n")),Object(o.b)("p",null,"If possible, it's recommended to perform the comparison outside the ",Object(o.b)("inlineCode",{parentName:"p"},"produce")," function, or to use a unique identifier property like ",Object(o.b)("inlineCode",{parentName:"p"},".id")," instead, to avoid needing to use ",Object(o.b)("inlineCode",{parentName:"p"},"original"),"."))}d.isMDXComponent=!0},99:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return b}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(r),m=n,b=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return r?a.a.createElement(b,s(s({ref:t},c),{},{components:r})):a.a.createElement(b,s({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);